"""
üìÑ Generador Profesional de Reportes PDF para Retinopat√≠a Diab√©tica
Sistema completo de generaci√≥n de reportes m√©dicos profesionales con visualizaciones
"""

import os
import io
import base64
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
import logging

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm, mm
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak
from reportlab.platypus import Table, TableStyle, KeepTogether, Frame, PageTemplate
from reportlab.graphics.shapes import Drawing, Rect, String
from reportlab.graphics import renderPDF
from reportlab.pdfgen import canvas
from reportlab.lib.colors import HexColor
import numpy as np
from PIL import Image as PILImage
import matplotlib
matplotlib.use('Agg')  # Backend sin GUI
import matplotlib.pyplot as plt
import seaborn as sns

logger = logging.getLogger(__name__)

class ProfessionalPDFReport:
    """
    Generador de reportes PDF profesionales para diagn√≥stico de retinopat√≠a diab√©tica
    Incluye visualizaciones m√©dicas, an√°lisis de confianza y recomendaciones
    """

    def __init__(self):
        self.styles = self._create_custom_styles()
        self.colors = {
            'primary': HexColor('#2E86AB'),
            'secondary': HexColor('#A23B72'),
            'success': HexColor('#2ECC71'),
            'warning': HexColor('#F39C12'),
            'danger': HexColor('#E74C3C'),
            'info': HexColor('#3498DB'),
            'dark': HexColor('#2C3E50'),
            'light_gray': HexColor('#ECF0F1'),
            'medical_blue': HexColor('#1E3A8A'),
            'medical_green': HexColor('#059669')
        }

    def _create_custom_styles(self):
        """Crea estilos personalizados para el reporte m√©dico"""
        styles = getSampleStyleSheet()

        # Estilo para t√≠tulo principal
        styles.add(ParagraphStyle(
            name='TitleMain',
            parent=styles['Title'],
            fontSize=24,
            textColor=HexColor('#1E3A8A'),
            spaceAfter=20,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))

        # Estilo para subt√≠tulos
        styles.add(ParagraphStyle(
            name='SubTitle',
            parent=styles['Heading1'],
            fontSize=16,
            textColor=HexColor('#2E86AB'),
            spaceAfter=12,
            spaceBefore=18,
            fontName='Helvetica-Bold'
        ))

        # Estilo para encabezados de secci√≥n
        styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=styles['Heading2'],
            fontSize=14,
            textColor=HexColor('#2C3E50'),
            spaceAfter=8,
            spaceBefore=15,
            fontName='Helvetica-Bold',
            borderWidth=0,
            borderColor=HexColor('#2E86AB'),
            borderPadding=5
        ))

        # Estilo para texto m√©dico
        styles.add(ParagraphStyle(
            name='MedicalText',
            parent=styles['Normal'],
            fontSize=11,
            textColor=HexColor('#2C3E50'),
            spaceAfter=6,
            alignment=TA_JUSTIFY,
            fontName='Helvetica'
        ))

        # Estilo para datos importantes
        styles.add(ParagraphStyle(
            name='ImportantData',
            parent=styles['Normal'],
            fontSize=12,
            textColor=HexColor('#1E3A8A'),
            spaceAfter=8,
            fontName='Helvetica-Bold'
        ))

        # Estilo para confianza alta
        styles.add(ParagraphStyle(
            name='HighConfidence',
            parent=styles['Normal'],
            fontSize=11,
            textColor=HexColor('#059669'),
            fontName='Helvetica-Bold'
        ))

        # Estilo para confianza baja
        styles.add(ParagraphStyle(
            name='LowConfidence',
            parent=styles['Normal'],
            fontSize=11,
            textColor=HexColor('#DC2626'),
            fontName='Helvetica-Bold'
        ))

        # Estilo para recomendaciones
        styles.add(ParagraphStyle(
            name='Recommendation',
            parent=styles['Normal'],
            fontSize=11,
            textColor=HexColor('#2C3E50'),
            spaceAfter=6,
            leftIndent=20,
            bulletIndent=15,
            fontName='Helvetica'
        ))

        return styles

    def generate_patient_report(self, patient_data: Dict, diagnosis_data: Dict,
                              confidence_analysis: Dict, gradcam_data: Optional[Dict] = None) -> bytes:
        """
        Genera reporte completo del paciente

        Args:
            patient_data: Informaci√≥n del paciente
            diagnosis_data: Datos del diagn√≥stico
            confidence_analysis: An√°lisis de confianza
            gradcam_data: Datos de GradCAM (opcional)

        Returns:
            bytes: PDF generado
        """
        try:
            # Buffer para el PDF
            buffer = io.BytesIO()

            # Crear documento
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=2*cm,
                leftMargin=2*cm,
                topMargin=2*cm,
                bottomMargin=2*cm
            )

            # Construir contenido
            story = []

            # 1. Encabezado principal
            self._add_header(story, patient_data)

            # 2. Informaci√≥n del paciente
            self._add_patient_info(story, patient_data)

            # 3. Diagn√≥stico principal
            self._add_diagnosis_section(story, diagnosis_data, confidence_analysis)

            # 4. An√°lisis de confianza detallado
            self._add_confidence_analysis(story, confidence_analysis)

            # 5. Visualizaciones m√©dicas
            if gradcam_data:
                self._add_medical_visualizations(story, gradcam_data)

            # 6. Recomendaciones cl√≠nicas
            self._add_clinical_recommendations(story, diagnosis_data, confidence_analysis)

            # 7. Informaci√≥n t√©cnica
            self._add_technical_details(story, diagnosis_data, confidence_analysis)

            # 8. Pie de p√°gina con disclaimer
            self._add_disclaimer(story)

            # Generar PDF
            doc.build(story)

            # Obtener contenido del buffer
            pdf_content = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ Reporte PDF generado: {len(pdf_content)} bytes")
            return pdf_content

        except Exception as e:
            logger.error(f"Error generando reporte PDF: {e}")
            raise

    def _add_header(self, story: List, patient_data: Dict):
        """Agrega encabezado principal del reporte"""
        # Logo o t√≠tulo institucional (si tienes logo, a√±√°delo aqu√≠)
        story.append(Paragraph(
            "REPORTE DE AN√ÅLISIS DE RETINOPAT√çA DIAB√âTICA",
            self.styles['TitleMain']
        ))

        story.append(Paragraph(
            "Sistema de Inteligencia Artificial para Diagn√≥stico M√©dico",
            self.styles['SubTitle']
        ))

        # L√≠nea divisoria
        story.append(Spacer(1, 15))

        # Informaci√≥n del reporte
        report_info = [
            ["Fecha del Reporte:", datetime.now().strftime("%d/%m/%Y %H:%M")],
            ["N√∫mero de Historia:", patient_data.get('historia_clinica', 'N/A')],
            ["Sistema:", "IA Retinopat√≠a v2.0"],
        ]

        table = Table(report_info, colWidths=[4*cm, 8*cm])
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('TEXTCOLOR', (0, 0), (0, -1), self.colors['dark']),
        ]))

        story.append(table)
        story.append(Spacer(1, 20))

    def _add_patient_info(self, story: List, patient_data: Dict):
        """Agrega informaci√≥n del paciente"""
        story.append(Paragraph("INFORMACI√ìN DEL PACIENTE", self.styles['SectionHeader']))

        # Calcular edad si hay fecha de nacimiento
        edad = "N/A"
        if patient_data.get('fecha_nacimiento'):
            try:
                from datetime import date
                fecha_nac = datetime.strptime(patient_data['fecha_nacimiento'], '%Y-%m-%d').date()
                edad = str((date.today() - fecha_nac).days // 365)
            except:
                pass

        patient_info = [
            ["Nombre Completo:", f"{patient_data.get('nombres', '')} {patient_data.get('apellidos', '')}"],
            ["CI:", patient_data.get('ci', 'N/A')],
            ["Edad:", f"{edad} a√±os"],
            ["G√©nero:", patient_data.get('genero', 'N/A')],
            ["Tipo de Diabetes:", patient_data.get('tipo_diabetes', 'N/A')],
            ["Estado Dilataci√≥n:", patient_data.get('estado_dilatacion', 'N/A')],
            ["C√°mara Retinal:", patient_data.get('camara_retinal', 'N/A')],
        ]

        table = Table(patient_info, colWidths=[4*cm, 8*cm])
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('TEXTCOLOR', (0, 0), (0, -1), self.colors['medical_blue']),
            ('GRID', (0, 0), (-1, -1), 0.5, self.colors['light_gray']),
            ('BACKGROUND', (0, 0), (0, -1), self.colors['light_gray']),
        ]))

        story.append(table)
        story.append(Spacer(1, 20))

    def _add_diagnosis_section(self, story: List, diagnosis_data: Dict, confidence_analysis: Dict):
        """Agrega secci√≥n de diagn√≥stico principal"""
        story.append(Paragraph("DIAGN√ìSTICO PRINCIPAL", self.styles['SectionHeader']))

        # Mapeo de resultados
        resultados_map = {
            0: "Sin retinopat√≠a diab√©tica",
            1: "Retinopat√≠a diab√©tica leve",
            2: "Retinopat√≠a diab√©tica moderada",
            3: "Retinopat√≠a diab√©tica severa",
            4: "Retinopat√≠a diab√©tica proliferativa"
        }

        # Severidad y color
        severidad_map = {
            0: ("NORMAL", self.colors['success']),
            1: ("LEVE", self.colors['info']),
            2: ("MODERADA", self.colors['warning']),
            3: ("SEVERA", self.colors['danger']),
            4: ("CR√çTICA", self.colors['danger'])
        }

        resultado = diagnosis_data.get('resultado', 0)
        confianza = float(diagnosis_data.get('confianza', 0))

        diagn√≥stico = resultados_map.get(resultado, "Resultado desconocido")
        severidad, color_severidad = severidad_map.get(resultado, ("DESCONOCIDO", self.colors['dark']))

        # Tabla de diagn√≥stico
        diagnosis_table = [
            ["DIAGN√ìSTICO:", diagn√≥stico],
            ["SEVERIDAD:", severidad],
            ["CONFIANZA DEL SISTEMA:", f"{confianza:.1%}"],
            ["NIVEL DE CONFIANZA:", confidence_analysis.get('confidence_level', 'N/A')],
        ]

        table = Table(diagnosis_table, colWidths=[5*cm, 9*cm])
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('TEXTCOLOR', (0, 0), (0, -1), self.colors['medical_blue']),
            ('TEXTCOLOR', (1, 1), (1, 1), color_severidad),  # Color para severidad
            ('FONTNAME', (1, 1), (1, 1), 'Helvetica-Bold'),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['medical_blue']),
            ('BACKGROUND', (0, 0), (0, -1), self.colors['light_gray']),
        ]))

        story.append(table)

        # Interpretaci√≥n del diagn√≥stico
        story.append(Spacer(1, 15))
        story.append(Paragraph("INTERPRETACI√ìN CL√çNICA", self.styles['SectionHeader']))

        interpretacion = self._get_clinical_interpretation(resultado, confianza)
        story.append(Paragraph(interpretacion, self.styles['MedicalText']))

        story.append(Spacer(1, 15))

    def _add_confidence_analysis(self, story: List, confidence_analysis: Dict):
        """Agrega an√°lisis detallado de confianza"""
        story.append(Paragraph("AN√ÅLISIS DE CONFIANZA DEL SISTEMA", self.styles['SectionHeader']))

        # M√©tricas de confianza
        final_confidence = confidence_analysis.get('final_confidence', 0)
        raw_confidence = confidence_analysis.get('raw_confidence', 0)
        calibrated_confidence = confidence_analysis.get('calibrated_confidence', 0)

        confidence_data = [
            ["Confianza Base:", f"{raw_confidence:.1%}"],
            ["Confianza Calibrada:", f"{calibrated_confidence:.1%}"],
            ["Confianza Final:", f"{final_confidence:.1%}"],
            ["Interpretaci√≥n:", confidence_analysis.get('interpretation', 'N/A')],
        ]

        table = Table(confidence_data, colWidths=[4*cm, 8*cm])
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('TEXTCOLOR', (0, 0), (0, -1), self.colors['medical_blue']),
            ('GRID', (0, 0), (-1, -1), 0.5, self.colors['light_gray']),
        ]))

        story.append(table)

        # M√©tricas de incertidumbre si est√°n disponibles
        uncertainty = confidence_analysis.get('uncertainty_metrics', {})
        if uncertainty:
            story.append(Spacer(1, 10))
            story.append(Paragraph("M√©tricas de Incertidumbre:", self.styles['ImportantData']))

            uncertainty_data = [
                ["Entrop√≠a:", f"{uncertainty.get('entropy', 0):.3f}"],
                ["Margen de Confianza:", f"{uncertainty.get('margin', 0):.3f}"],
                ["Coeficiente de Gini:", f"{uncertainty.get('gini_coefficient', 0):.3f}"],
            ]

            uncertainty_table = Table(uncertainty_data, colWidths=[4*cm, 3*cm])
            uncertainty_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('TEXTCOLOR', (0, 0), (-1, -1), self.colors['dark']),
            ]))

            story.append(uncertainty_table)

        story.append(Spacer(1, 15))

    def _add_medical_visualizations(self, story: List, gradcam_data: Dict):
        """Agrega visualizaciones m√©dicas"""
        story.append(Paragraph("VISUALIZACIONES M√âDICAS", self.styles['SectionHeader']))

        # Descripci√≥n de GradCAM
        story.append(Paragraph(
            "El siguiente mapa de calor muestra las regiones de la retina que el sistema de IA "
            "consider√≥ m√°s relevantes para el diagn√≥stico. Las √°reas rojas indican mayor activaci√≥n "
            "del modelo, mientras que las √°reas azules indican menor relevancia.",
            self.styles['MedicalText']
        ))

        story.append(Spacer(1, 10))

        # Insertar imagen GradCAM si est√° disponible
        if gradcam_data.get('gradcam_base64'):
            try:
                # Decodificar imagen base64
                image_data = base64.b64decode(gradcam_data['gradcam_base64'])
                img = Image(io.BytesIO(image_data))

                # Ajustar tama√±o
                img.drawHeight = 8*cm
                img.drawWidth = 8*cm

                # Centrar imagen
                img.hAlign = 'CENTER'

                story.append(img)

                # Informaci√≥n t√©cnica de la visualizaci√≥n
                story.append(Spacer(1, 10))

                viz_info = [
                    ["M√©todo de Visualizaci√≥n:", gradcam_data.get('method', 'GradCAM')],
                    ["Resoluci√≥n:", gradcam_data.get('size', 'N/A')],
                    ["Confianza de M√°scara:", f"{gradcam_data.get('mask_confidence', 0):.1%}"],
                ]

                viz_table = Table(viz_info, colWidths=[5*cm, 6*cm])
                viz_table.setStyle(TableStyle([
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ]))

                story.append(viz_table)

            except Exception as e:
                logger.error(f"Error insertando GradCAM: {e}")
                story.append(Paragraph(
                    "Error al cargar la visualizaci√≥n m√©dica.",
                    self.styles['MedicalText']
                ))

        story.append(Spacer(1, 20))

    def _add_clinical_recommendations(self, story: List, diagnosis_data: Dict, confidence_analysis: Dict):
        """Agrega recomendaciones cl√≠nicas"""
        story.append(Paragraph("RECOMENDACIONES CL√çNICAS", self.styles['SectionHeader']))

        resultado = diagnosis_data.get('resultado', 0)
        confianza = float(diagnosis_data.get('confianza', 0))

        recommendations = self._generate_clinical_recommendations(resultado, confianza, confidence_analysis)

        for i, rec in enumerate(recommendations, 1):
            story.append(Paragraph(
                f"{i}. {rec}",
                self.styles['Recommendation']
            ))

        story.append(Spacer(1, 15))

        # Seguimiento recomendado
        follow_up = self._get_followup_schedule(resultado)
        story.append(Paragraph("CRONOGRAMA DE SEGUIMIENTO SUGERIDO", self.styles['SectionHeader']))
        story.append(Paragraph(follow_up, self.styles['MedicalText']))

        story.append(Spacer(1, 20))

    def _add_technical_details(self, story: List, diagnosis_data: Dict, confidence_analysis: Dict):
        """Agrega detalles t√©cnicos"""
        story.append(Paragraph("DETALLES T√âCNICOS", self.styles['SectionHeader']))

        technical_info = [
            ["Modelo de IA:", "ResNet50 + Transfer Learning"],
            ["Versi√≥n del Sistema:", diagnosis_data.get('modelo_version', 'v2.0')],
            ["Fecha de Procesamiento:", datetime.now().strftime("%d/%m/%Y %H:%M:%S")],
            ["ID de Procesamiento:", diagnosis_data.get('processing_id', 'N/A')],
        ]

        # Agregar detalles t√©cnicos si est√°n disponibles
        tech_details = confidence_analysis.get('technical_details', {})
        if tech_details:
            technical_info.extend([
                ["Temperature Scaling:", "S√≠" if tech_details.get('temperature_applied') else "No"],
                ["Test-Time Augmentation:", "S√≠" if tech_details.get('tta_used') else "No"],
                ["Confianza Base:", f"{tech_details.get('base_confidence', 0):.3f}"],
            ])

        table = Table(technical_info, colWidths=[5*cm, 6*cm])
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('TEXTCOLOR', (0, 0), (-1, -1), self.colors['dark']),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
        ]))

        story.append(table)
        story.append(Spacer(1, 15))

    def _add_disclaimer(self, story: List):
        """Agrega disclaimer m√©dico y legal"""
        story.append(Paragraph("IMPORTANTE - DISCLAIMER M√âDICO", self.styles['SectionHeader']))

        disclaimer_text = """
        Este reporte ha sido generado por un sistema de inteligencia artificial como herramienta
        de apoyo diagn√≥stico. Los resultados deben ser interpretados por un profesional m√©dico
        cualificado y NO reemplazan el juicio cl√≠nico profesional.

        ‚Ä¢ Este sistema es una herramienta de apoyo diagn√≥stico, no un sustituto del criterio m√©dico
        ‚Ä¢ Se requiere validaci√≥n por oftalm√≥logo especialista antes de tomar decisiones cl√≠nicas
        ‚Ä¢ La responsabilidad del diagn√≥stico final y tratamiento recae en el m√©dico tratante
        ‚Ä¢ Este reporte debe ser considerado junto con la historia cl√≠nica completa del paciente

        Para consultas t√©cnicas o dudas sobre el sistema, contacte al administrador del sistema.
        """

        story.append(Paragraph(disclaimer_text, self.styles['MedicalText']))

    def _get_clinical_interpretation(self, resultado: int, confianza: float) -> str:
        """Genera interpretaci√≥n cl√≠nica del diagn√≥stico"""
        interpretations = {
            0: "No se detectan signos de retinopat√≠a diab√©tica. La retina presenta caracter√≠sticas normales seg√∫n el an√°lisis automatizado.",
            1: "Se detectan signos leves de retinopat√≠a diab√©tica. Recomendable seguimiento peri√≥dico y control gluc√©mico estricto.",
            2: "Retinopat√≠a diab√©tica moderada detectada. Se requiere evaluaci√≥n oftalmol√≥gica especializada y posible intervenci√≥n.",
            3: "Retinopat√≠a diab√©tica severa identificada. Necesita atenci√≥n oftalmol√≥gica urgente y evaluaci√≥n para tratamiento inmediato.",
            4: "Retinopat√≠a diab√©tica proliferativa detectada. URGENTE: Requiere intervenci√≥n oftalmol√≥gica inmediata para prevenir p√©rdida visual."
        }

        base_interpretation = interpretations.get(resultado, "Resultado no reconocido.")

        if confianza < 0.7:
            base_interpretation += " NOTA: La confianza del sistema es moderada-baja, se recomienda especialmente la validaci√≥n por especialista."

        return base_interpretation

    def _generate_clinical_recommendations(self, resultado: int, confianza: float, confidence_analysis: Dict) -> List[str]:
        """Genera recomendaciones cl√≠nicas espec√≠ficas"""
        recommendations = []

        # Recomendaciones por severidad
        if resultado == 0:  # Sin retinopat√≠a
            recommendations = [
                "Control oftalmol√≥gico anual como m√≠nimo",
                "Mantener control gluc√©mico √≥ptimo (HbA1c < 7%)",
                "Monitoreo de presi√≥n arterial",
                "Control de l√≠pidos s√©ricos"
            ]
        elif resultado == 1:  # Leve
            recommendations = [
                "Control oftalmol√≥gico cada 6-12 meses",
                "Optimizaci√≥n del control gluc√©mico",
                "Control de factores de riesgo cardiovascular",
                "Educaci√≥n sobre autocuidado diab√©tico"
            ]
        elif resultado == 2:  # Moderada
            recommendations = [
                "Evaluaci√≥n oftalmol√≥gica cada 3-6 meses",
                "Considerar referencia a oftalm√≥logo especialista en retina",
                "Control gluc√©mico estricto",
                "Evaluaci√≥n de necesidad de tratamiento l√°ser"
            ]
        elif resultado == 3:  # Severa
            recommendations = [
                "URGENTE: Referencia inmediata a oftalm√≥logo especialista",
                "Evaluaci√≥n para fotocoagulaci√≥n panretiniana",
                "Control metab√≥lico estricto",
                "Seguimiento oftalmol√≥gico cada 2-3 meses"
            ]
        elif resultado == 4:  # Proliferativa
            recommendations = [
                "CR√çTICO: Atenci√≥n oftalmol√≥gica de emergencia",
                "Evaluaci√≥n inmediata para vitrectom√≠a si necesario",
                "Fotocoagulaci√≥n panretiniana urgente",
                "Hospitalizaci√≥n si hay hemorragia v√≠trea"
            ]

        # Recomendaciones adicionales por confianza
        if confianza < 0.75:
            recommendations.append("La confianza del sistema es limitada - Se requiere validaci√≥n obligatoria por especialista")

        if confidence_analysis.get('confidence_level') == 'Baja':
            recommendations.append("Considerar repetir el estudio con mejores condiciones de imagen")

        return recommendations

    def _get_followup_schedule(self, resultado: int) -> str:
        """Genera cronograma de seguimiento"""
        schedules = {
            0: "Control anual. Pr√≥xima evaluaci√≥n recomendada en 12 meses.",
            1: "Control semestral. Pr√≥xima evaluaci√≥n en 6 meses, con especialista en 12 meses si no hay cambios.",
            2: "Control trimestral. Evaluaci√≥n por especialista en retina dentro de 1-2 meses.",
            3: "Control mensual. Referencia URGENTE a especialista dentro de 1-2 semanas.",
            4: "Seguimiento inmediato. Atenci√≥n de emergencia dentro de 24-48 horas."
        }

        return schedules.get(resultado, "Consultar con especialista para determinar seguimiento apropiado.")

# Instancia global para f√°cil uso
pdf_generator = ProfessionalPDFReport()